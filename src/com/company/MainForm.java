package com.company;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.ResultSet;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;


public class MainForm extends JFrame{ //Основная форма приложения

    // Переменные, содержащие информацию о эллементах интерфейса
    JLabel lQuestion, lResult, lOtherResults, lName;
    JButton bYes, bNo, bResults, bBack, bStart;
    JTextField tName;
    JPanel pQuestions, pResult, pOtherResults, pName;




    String questions; // Переменная, содержащая текущий вопрос
    String name; // переменная, содержащая имя пользователя
    int k = 1; // Переменная, содержащая номер текущего вопроса
    String query = "http://cs.saject.ru/cs100/Andrey/DbConnection.php";//Адрес скрипта для работы с БД
    HttpURLConnection connection = null;

    int A=0, B=0, C=0, D=0, E=0, F=0; //Переменные, содержащие результаты пользователя(A-Зависимость, B-Независимость, C-Общительность, D-Необщительность, E-Принятие «борьбы», F-Избегание «борьбы»)




    public MainForm(){

        //Создание основного окна приложения
        super("Q-сортировка");
        setSize(600, 200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);


        //Создание окон в приложении
        CreatePanelQuestions();
        CreateOtherResults();
        CreateResult();
        CreatePanelName();

        //Переход к окну с вводом имени
        pQuestions.setVisible(false);
        pOtherResults.setVisible(false);
        pResult.setVisible(false);
        pName.setVisible(true);


        bYes.addActionListener(new ActionListener() {//Обработчик нажатия кнопки "Да"

            @Override
            public void actionPerformed(ActionEvent e) {
                //Оценка ответа пользователя
                if(k==3 | k==9 | k==15 | k==21 | k==27| k==33 | k==39 | k==45 | k==51 | k==54) //Зависимость
                    A+=1; // Да

                if(k==5 | k==7 | k==13 | k==19 | k==25 | k==31 | k==37 | k==43 | k==49 | k==52) //Общительность
                    C+=1; // Да

                if(k==1 | k==11 | k==17 | k==23 | k==29 | k==35 | k==41 | k==47 | k==56 | k==59) //Принятие «борьбы»
                    E+=1; // Да


                //Переход к следующему вопросу
                k+=1;
                questions = GetQuestion(k);
                lQuestion.setText(questions);

                //Переход к окну с результатами
                if(k==58){

                    Insert(name, A, C, E);
                }


            }
        });

        bNo.addActionListener(new ActionListener() {//Обработчик нажатия кнопки "Нет"

            @Override
            public void actionPerformed(ActionEvent e) {
                //Оценка ответа пользователя
                if(k==6 | k==12 | k==18 | k==24 | k==30 | k==36 | k==42 | k==48 | k==57 | k==60) //Независимость
                    B+=1; // Нет

                if(k==4 | k==10 | k==16 | k==22 | k==28 | k==34 | k==40 | k==46 | k==55 | k==58) //Необщительность
                    D+=1; // Нет

                if(k==2 | k==8 | k==14 | k==20 | k==26 | k==32 | k==38 | k==44 | k==50 | k==53) //Избегание «борьбы»
                    F+=1; // Нет


                //Переход к следующему вопросу
                k+=1;
                questions = GetQuestion(k);
                lQuestion.setText(questions);

                //Переход к окну с результатами
                if(k==58){
                    Insert(name, B, D, F);
                }


            }
        });

        bResults.addActionListener(new ActionListener() { //Обработчик нажатия кнопки "Подробные результаты"

            @Override
            public void actionPerformed(ActionEvent e) {
                //Переход к окну с  подробными результатами
                lOtherResults.setText("<html>"+ GiveOtherResults(B, C)+"</html>");
                pOtherResults.setVisible(true);
                pResult.setVisible(false);

            }
        });

        bBack.addActionListener(new ActionListener() { //Обработчик нажатия кнопки "Назад"

            @Override
            public void actionPerformed(ActionEvent e) {
                //Переход к окну с первичными результатами
                pOtherResults.setVisible(false);
                pResult.setVisible(true);
            }
        });

        bStart.addActionListener(new ActionListener() { //Обработчик нажатия кнопки "Приступить к тесту"

            @Override
            public void actionPerformed(ActionEvent e) {
                //Переход к окну с вопросами
                pName.setVisible(false);
                pQuestions.setVisible(true);
                name = tName.getText();
                setSize(930, 250);
            }
        });

        addWindowListener(new WindowAdapter(){ //Обработчик закрытия приложения
            public void windowClosing(WindowEvent e){
                int i = JOptionPane.showConfirmDialog(null, "Закрыть окно?");
                if(i==0){
                    System.exit(0);
                }


            }
        });
    }

    public void CreatePanelName(){  //Функция для создания окна ввода имени
        //Создание и размещение эллементов интерфейса
        pName = new JPanel();
        pName.setSize(930, 250);
        pName.setLayout(null);

        lName = new JLabel("Введите имя:");
        lName.setLocation(100, 17);
        lName.setSize(100, 60);

        tName = new JTextField(255);
        tName.setLocation(215, 35);
        tName.setSize(300,30);

        bStart = new JButton("Приступить к тесту");
        bStart.setLocation(310, 95);
        bStart.setSize(200,60);

        add(pName);

        pName.add(lName);
        pName.add(tName);
        pName.add(bStart);


    }


    public void CreatePanelQuestions(){ //Функция для создания окна с вопросами

        questions = GetQuestion(k);//Получение первого вопроса

        //Создание и размещение эллементов интерфейса
        pQuestions = new JPanel();
        pQuestions.setSize(930, 250);
        pQuestions.setLayout(null);

        lQuestion = new JLabel(questions);
        lQuestion.setLocation(15, 10);
        lQuestion.setSize(915, 60);

        bYes = new JButton("Да");
        bYes.setLocation(340, 75);
        bYes.setSize(60,60);

        bNo = new JButton("Нет");
        bNo.setLocation(500, 75);
        bNo.setSize(60,60);

        add(pQuestions);

        pQuestions.add(lQuestion);
        pQuestions.add(bYes);
        pQuestions.add(bNo);

    }

    public void CreateResult() { //Функция для создания окна с первичными результатами тестирования

        //Создание и размещение эллементов интерфейса
        pResult = new JPanel();
        pResult.setSize(765, 350);
        pResult.setLayout(null);

        lResult = new JLabel();
        lResult.setLocation(0,0);
        lResult.setSize(730, 150);

        bResults = new JButton("Подробные результаты");
        bResults.setLocation(280,200);
        bResults.setSize(200, 50);


        add(pResult);
        pResult.add(lResult);
        pResult.add(bResults);



    }

    public void CreateOtherResults(){ //Функция для создания окна с подробными результатми тестирования
        //Создание и размещение эллементов интерфейса
        pOtherResults = new JPanel();
        pOtherResults.setSize(765, 350);
        pOtherResults.setLayout(null);

        lOtherResults = new JLabel();
        lOtherResults.setLocation(0,0);
        lOtherResults.setSize(730, 150);

        bBack = new JButton("Назад");
        bBack.setLocation(280,200);
        bBack.setSize(200, 50);

        add(pOtherResults);
        pOtherResults.add(lOtherResults);
        pOtherResults.add(bBack);



    }

    public String GiveResult(int A, int B, int C){ //Функция, получающая первичные результаты тестирования пользователя
        String res = null;;
        if (A > 4)
            res = "Результаты теста недействительны, всвязи с неискренностью ответов";
        else if (C >= 12 & B >= 12)
            res = "Вы - Холерик" +"<br>" + "Бывает несдержан, нетерпелив, вспыльчив, но так же легко отходит и забывает об обидах. Устойчивость стремлений и интересов, большая настойчивость, высокая ответственность, переживает за результаты и последствия своих действий, не любит расстраивать окружающих. Общителен, открыт, умеет сопереживать, сочувствовать, энергичный, работоспособный, быстро переключается с одного дела на другое, но не всегда внимателен и организован. Тревожен, беспокоен, не всегда чётко определяет приоритеты.";
        else if(C < 12 & B >= 12)
            res = "Вы - Сангвиник" + "<br>" + "Повышенная активность, возбудимость. Живо и с большим энтузиазмом откликается на всё, привлекшее его внимание. Живая мимика и выразительные движения. По его лицу легко угадать, каково его настроение, каково его отношение к предмету или человеку. Быстро сосредоточивает внимание, при выполнении какого-либо дела работает быстро, может долго работать, не утомляясь, энергично принимается за новое дело. Быстрота ума, находчивость. Чувства, настроения, интересы и стремления очень изменчивы. Он легко сходится с новыми людьми. Легко привыкает к новым требованиям и обстановке. Азартен, склонен к риску. Может быть лидером и вести за собой, умеет увлекать других своими идеями. Не всегда чувствителен к переживаниям и проблемам окружающих, хорошо справляется лишь с той работой, которая для него интересна и важна. Не всегда ответственно выполняет то, что ему не очень нужно или неинтересно.";
        else if(C < 12 & B <= 12)
            res = "Вы - Флегматик" + "<br>" + "Мало эмоционален. Трудно рассмешить, разгневать или опечатать. Когда все смеются по какому-либо поводу, остаётся невозмутимым. При больших неприятностях остаётся спокойным. Мимика и движения не выразительны. Энергичен, отличается терпеливостью, выдержкой, самообладанием. Медленный темп движений и речи, ненаходчив. Медленно сосредоточивает внимание. С трудом переключает внимание, приспосабливается к новой обстановке и перестраивает навыки и привычки. С трудом сходится с новыми людьми и откликается на внешние впечатления.";
        else if(C >= 12 & B < 12)
            res = "Вы - Меланхолик" + "<br>" + "Повышенная чувствительность, незначительный повод может вызвать слёзы на глазах. Чрезмерно обидчив, раним, мнителен. Мимика и движения не выразительны. Голос тихий. Плачет и смеётся тихо. Пониженная активность. Нерешителен, не уверен в себе, робок, малейшая трудность заставляет опускать руки, неэнергичен, ненастойчив, легко утомляется и мало работоспособен. Легко отвлекаемое и неустойчивое внимание. Медленный психический темп. Обиды носит в себе, фиксируется на ошибках и неудачах.";
        return res;
    }

    public String GiveOtherResults(int B, int C){ //Функция, получающая подробные результаты тестирования пользователя
        String res = null;
        if(B>16 & C>16)
            res = "Вы импульсивный, вспыльчивый, легко возбудимый человек. Вам трудно сдерживать себя и вы бываете излишне резки и прямолинейны. Увлеченно отдаетесь делу, но при неудаче быстро теряете интерес. Люди вашего типа предпочитают работу с ярко выраженной цикличностью, требующую максимального напряжения сил, но не длительную. Их привлекает высокий темп движений, разнообразие, необходимость проявлять смекалку и сообразительность." + "<br>" + " Вам больше подходят профессии технической направленности или связанные с преподаванием технических дисциплин, а так же профессии, связанные с переменой обстановки, путешествиями, разъездами (геолог, инженер-радиофизик, инженер-строитель, инженер по связи, инженер-преподаватель, программист и др.).";
        else if(B>16 & C<8)
            res = "Вы человек уравновешенный, умеете себя сдерживать. В сложных жизненных ситуациях можете иногда ''потерять голову'', но волевым усилием способны восстановить равновесие. Достаточно легко переносите смену обстановки, схватываете новое, гибки в общении с людьми, склонны к активной деятельности. Предпочитаете самостоятельность в делах, работу, требующую смекалки, находчивости, энергичности, напряжения, выдержки. Люди вашего типа лучше справляются с деятельностью, требующей четкого планирования, учета последовательности событий. Чаще всего они становятся лидерами, организаторами."+"<br>"+"Вам подходят профессии: преподаватель, психолог, дефектолог, воспитатель, диспетчер, журналист, специалист по связям с общественностью, социолог, экскурсовод, агент по туризму, страховке и другим направлениям, экономист, технолог, переводчик, юрист, водитель разнообразных видов транспорта и т. п.";
        else if(B>16 & C<16 & C>8)
            res = "Вы человек достаточно живой и общительный, активный, когда видите перед собой ясную задачу и конкретное дело. Неплохо переносите смену обстановки, достаточно быстро к ней приспосабливаетесь, легко схватываете новое. Вы энергичны, способны много работать не утомляясь, сдержанны, спокойны, легко можете включаться в новую деятельность."+"<br>"+"Вам подходят разнообразные профессии: геолог, археолог, инженер-физик, педагог, проводник пассажирского поезда, летчик, системный администратор, строитель, юрист, инженер-конструктор, наладчик оборудования, инженер транспорта, технолог по производству питания, одежды и др.";
        else if(B<8 & C<8)
            res = "Вы человек весьма уравновешенный в своих чувствах и действиях. Остаетесь спокойным и ровным в сложных жизненных ситуациях. Очень сдержанны, рассудительны, но медлительны. Труднее приспосабливаетесь к изменяющейся обстановке. Вам требуется время для обдумывания, раскачки, но, начав дело, вы обычно стараетесь довести его до конца, вы малоразговорчивы, не любите говорить по пустякам, вам трудно общаться с людьми. Предпочитаете работу, не требующую частой смены заданий, медленного темпа. Затрудняетесь самостоятельно принимать решения, поэтому вам лучше не брать на себя ответственность за руководство людьми и организацию деятельности других."+"<br>"+"Вам больше подходят профессии: оператор станков с программным управлением, оператор связи, компьютерных систем, экономист, бухгалтер, корректор, лесничий, машинист, техник-технолог по разным видам производства и др.";
        else if(B<8 & C>16)
            res = "Вы впечатлительный, стеснительный человек, трудно находящий контакты с другими людьми. Зачастую обидчивы, чувствуете себя уверенно лишь в знакомой, привычной обстановке. Люди, мало вас знающие, часто не понимают вас. Вам рекомендуется работать в обстановке, не требующей большого нервного напряжения, быстрых реакций и частой смены характера деятельности."+"<br>"+"Вам больше подойдут профессии: ландшафтный дизайнер, микробиолог, лаборант в химлаборатории, библиотекарь, корректор, реставратор, настройщик музыкальных инструментов, сборщик радиодеталей и микросхем, деталей на часовом заводе, чертежник, художник-архитектор, конструктор-модельер, музыкальный работник, технолог в легкой и пищевой промышленности.";
        else if(B<8 & C<16 & C>8)
            res = "Вы человек необщительный, застенчивый, довольно сдержанный в чувствах, вдумчивый, склонный к рассуждениям. В поступках ориентируетесь в основном на собственные чувства, представления. Такой человек сближается только с немногими друзьями. Свои действия планирует заранее, не любит сильных впечатлений, стремится к спокойной, упорядоченной жизни. Людям этого типа предпочтительны профессии, где требуются усидчивость, пунктуальность, внимательность в работе. Они предпочитают работать в одиночку."+"<br>"+"Вам больше подойдут профессии: программист, инженер леса, зоолог, биолог, переводчик иностранного текста и др.";
        else if(B<16 & B>8 & C>16)
            res="Вы человек эмоционально неустойчивый, чувствительный. В меру общительный, но в отношениях с людьми не очень выдержанный, легко обижаетесь. Ваши поступки часто зависят от вашего настроения: вы то очень энергичны, то становитесь вялым и апатичным. Непостоянны во взглядах и интересах. У вас хорошо развита интуиция. Люди вашего типа предпочитают работу интересную, связанную с эмоциями, но непродолжительную и не очень напряженную, больше умственную, чем физическую."+"<br>"+"Вам подойдут профессии: филолог, актер драмтеатра, певец, архитектор, специалист в легкой и пищевой промышленности, конооператор, журналист, кондитер, фармацевт, ювелир, юрист и т. д.";
        else if(B>8 & B<16 & C<8)
            res = "Вы человек спокойный, постоянный в дружбе и интересах. Эмоции не мешают вам видеть вещи реалистично, умеете приспосабливаться к действительности, рассудительны, в меру общительны, но в поведении не зависимы от взглядов других, охотно делитесь советами, не боитесь неудач, пытаетесь разобраться в их причинах. Люди этого типа могут добиться успеха в разнообразных видах деятельности, особенно в тех, где четко определены действия и наглядно представлен конечный результат."+"<br>"+"Вам подойдут профессии: геолог, офицер, преподаватель, врач, пилот, специалист в области социологии, права, дизайнер, журналист, переводчик, дипломат и т.д.";
        else if(B>8 & B<16 & C>8 & C <16)
            res = "Вы человек в меру общительный, довольно спокойный, но иногда даете волю эмоциям. Достаточно открытый, не очень тревожный, хорошо переносите одиночество, не очень любите шумные компании. Люди вашего типа в меру активны, универсальны в поведении. Они хорошо работают в разных областях деятельности, но при условии осознания важности работы, наличия перспективы продвижения по службе."+"<br>"+"Вам подойдут профессии: специалист в области разнообразных видов транспорта, радиоэлектроники, техники, систем связи, педагог, врач, работник сферы обслуживания и др.";

        return res;
    }

    public void Insert(String name, int A, int B, int C){ // Функция, передающая результаты тестирования пользователя в базу данных
        try{
//            String data = "oper=add" + "&name=" + name + "&parameter1=" + A + "&parameter2=" + B + "&parameter3=" + C; // строка с параметрами для записи результатов в базу данных
//            byte[] dataBytes= data.getBytes("UTF-8");
//            connection = (HttpURLConnection) new URL(query).openConnection();
//            connection.setRequestMethod("POST");
//            connection.setUseCaches(false);
//            connection.setConnectTimeout(250);
//            connection.setReadTimeout(250);
//            connection.setDoOutput(true);
//            connection.getOutputStream().write(dataBytes);
//
//            connection.connect();
//            connection.getResponseCode();
//
//            lResult.setText("<html>"+GiveResult(A, B, C)+"</html>");
//            pResult.setVisible(true);
//            pQuestions.setVisible(false);
//            setSize(730, 350);
//
//            if(A > 4)
//                bResults.setVisible(false);
        }
        catch(Exception e){

        }
    }

    public String GetQuestion(int k){ //Фунция, получающая текущий вопрос
//        String l = "";
        try {

            Database.connect();
            ResultSet questions = Database.getQuestions();

            while (questions.next()) {

            }

//            String data = "oper=getQuestion"; // строка с параметрами для считывания вопросов
//            byte[] dataBytes= data.getBytes("UTF-8");
//
//
//            connection = (HttpURLConnection) new URL(query).openConnection();
//            connection.setRequestMethod("POST");
//            connection.setUseCaches(false);
//            connection.setConnectTimeout(250);
//            connection.setReadTimeout(250);
//            connection.setDoOutput(true);
//            connection.getOutputStream().write(dataBytes);
//
//            connection.connect();
//
//
//
//            if (HttpURLConnection.HTTP_OK == connection.getResponseCode()) {
//
//                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"));
//                String line;
//                String s[];
//
//                while ((line = in.readLine()) != null) {
//
//                    s = line.split(";");
//
//                    if(Integer.parseInt(s[0]) == k){
//                        l = s[1];
//                    }
//                }
//
//
//
//            } else {
//                System.out.println("fail: " + connection.getResponseCode() + ", " + connection.getResponseMessage());
//                l = "error";
//
//            }
        } catch (Exception ex) {

            }
        return null;
    }

}